"""initial migration

Revision ID: b2fb25d98a86
Revises: 
Create Date: 2024-02-20 23:13:37.754080

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'b2fb25d98a86'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('scan_status',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=50), nullable=True),
    sa.Column('time_added', sa.TIMESTAMP(), server_default=sa.text('now()'), nullable=True),
    sa.Column('time_modified', sa.TIMESTAMP(), server_default=sa.text('now()'), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('scan',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=True),
    sa.Column('info', sa.JSON(), nullable=True),
    sa.Column('status', sa.Integer(), nullable=True),
    sa.Column('time_added', sa.TIMESTAMP(), server_default=sa.text('now()'), nullable=True),
    sa.Column('time_modified', sa.TIMESTAMP(), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['status'], ['scan_status.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('scan_log',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('scan_id', sa.Integer(), nullable=True),
    sa.Column('log_message', sa.Text(), nullable=True),
    sa.Column('time_added', sa.TIMESTAMP(), server_default=sa.text('now()'), nullable=True),
    sa.Column('time_modified', sa.TIMESTAMP(), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['scan_id'], ['scan.id'], ),
    sa.PrimaryKeyConstraint('id')
    )

    scan_status_table = sa.Table(
        'scan_status',
        sa.MetaData(),
        sa.Column('id', sa.Integer, primary_key=True),
        sa.Column('name', sa.String(50), nullable=False)
    )
    
    # Bulk insert into scan_status table
    op.bulk_insert(scan_status_table, [
        {'name': 'INITIATED'},
        {'name': 'COMPLETED'},
        {'name': 'FAILED'},
        {'name': 'RESUMED'},
    ])

    # Create trigger to insert into scan_log
    op.execute("""
        CREATE OR REPLACE FUNCTION insert_scan_log()
        RETURNS TRIGGER AS
        $$
        BEGIN
            INSERT INTO scan_log (scan_id, scan_status)
            VALUES (NEW.id, NEW.status);
            RETURN NEW;
        END;
        $$
        LANGUAGE plpgsql;
    """)
    
    op.execute("""
        CREATE TRIGGER trigger_insert_scan_log
        AFTER INSERT ON scan
        FOR EACH ROW
        EXECUTE FUNCTION insert_scan_log();
    """)
    # ### end Alembic commands ###



def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###

    # Drop trigger and function
    op.execute("DROP TRIGGER IF EXISTS trigger_insert_scan_log ON scan")
    op.execute("DROP FUNCTION IF EXISTS insert_scan_log()")

    # Delete inserted rows from scan_status table
    op.execute("DELETE FROM scan_status WHERE name IN ('INITIATED', 'COMPLETED', 'FAILED', 'RESUMED')")

    op.drop_table('scan_log')
    op.drop_table('scan')
    op.drop_table('scan_status')
    # ### end Alembic commands ###
