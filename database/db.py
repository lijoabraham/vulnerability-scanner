from sqlalchemy import create_engine
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker
from sqlalchemy.engine import url

# Create a URL object from the database URL string
connection_url  = url.URL(drivername='postgresql',
                 username='admin',
                 password='5fI1aJZql8qgKMXDAys4655fAeCBvNZ1',
                 host='dpg-cnadpoacn0vc73904d9g-a.ohio-postgres.render.com',
                 port=5432,
                 database='isp_wb8q',
                 query={'options': '-csearch_path=scanner', 'sslmode': 'require'})  # Specify the schema in the query

# Convert the URL object back to a string
# database_url_with_schema = str(url)
# print(database_url_with_schema)

# database_url_with_schema = "postgresql://admin:5fI1aJZql8qgKMXDAys4655fAeCBvNZ1@dpg-cnadpoacn0vc73904d9g-a.ohio-postgres.render.com/isp_wb8q?options=-csearch_path%3Dscanner&sslmode=require"

# Create SQLAlchemy engine
engine = create_engine(connection_url,  echo=True)

# Create a sessionmaker
SessionLocal = sessionmaker(autocommit=False, autoflush=True, bind=engine)

# Define a base class for declarative class definitions
Base = declarative_base()

# Dependency to get a database session
def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()
