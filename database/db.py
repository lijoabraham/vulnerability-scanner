from sqlalchemy import create_engine
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker
from sqlalchemy.engine.url import URL

# Create a URL object from the database URL string
url = URL.create(drivername='postgresql',
                 username='postgres',
                 password='postgres',
                 host='localhost',
                 port=5432,
                 database='isp',
                 query={'options': '-csearch_path=scanner'})  # Specify the schema in the query

# Convert the URL object back to a string
database_url_with_schema = str(url)

# Create SQLAlchemy engine
engine = create_engine(database_url_with_schema, pool_size=20, max_overflow=0)

# Create a sessionmaker
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)

# Define a base class for declarative class definitions
Base = declarative_base()

# Dependency to get a database session
def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()
