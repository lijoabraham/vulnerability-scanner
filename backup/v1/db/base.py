from sqlalchemy import create_engine
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker
from sqlalchemy.engine import url
from settings import get_settings


db_settings = get_settings()

# Create a URL object from the database URL string
connection_url  = url.URL(drivername='postgresql',
                 username=db_settings.DB_USERNAME,
                 password=db_settings.DB_PASSWORD,
                 host=db_settings.DB_HOST,
                 port=db_settings.DB_PORT,
                 database=db_settings.DB_DATABASE,
                 query={'options': f'-csearch_path={db_settings.DB_SCHEMA}', 'sslmode': 'require'})  # Specify the schema in the query

# Create SQLAlchemy engine
engine = create_engine(connection_url,  echo=True)

# Create a sessionmaker
SessionLocal = sessionmaker(autocommit=False, autoflush=True, bind=engine)

# Define a base class for declarative class definitions
Base = declarative_base()

# Dependency to get a database session
def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()
