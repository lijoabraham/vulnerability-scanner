# other import statement are above
from fastapi import Body, Depends, APIRouter, HTTPException, status
from sqlalchemy.orm import Session
from typing import Annotated
from fastapi.security import OAuth2PasswordRequestForm
from database.db import get_db
from api.v1.models.token import Token
from api.v1.models.user import CreateUser, User
from api.v1.services.auth import create_access_token, ACCESS_TOKEN_EXPIRE_MINUTES, authenticate_user, get_password_hash, get_current_active_user
from api.v1.services.db import create_user
from datetime import timedelta

router = APIRouter()


@router.post('/auth/signup', response_model=User)
def signup(
    payload: CreateUser = Body(), 
    db:Session=Depends(get_db)
):
    """Processes request to register user account."""
    payload.hashed_password = get_password_hash(payload.hashed_password)
    return create_user(db, user=payload)

@router.post("/auth/token")
async def login_for_access_token(
    form_data: Annotated[OAuth2PasswordRequestForm, Depends()],
    db:Session=Depends(get_db)
) -> Token:
    user = authenticate_user(db, form_data.username, form_data.password)
    if not user:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Incorrect username or password",
            headers={"WWW-Authenticate": "Bearer"},
        )
    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)
    access_token = create_access_token(
        data={"sub": user.email}, expires_delta=access_token_expires
    )
    return Token(access_token=access_token, token_type="bearer")

@router.get("/users/me/", response_model=User)
async def read_users_me(
    current_user: Annotated[User, Depends(get_current_active_user)]
):
    return current_user

