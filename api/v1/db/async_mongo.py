from motor.motor_asyncio import AsyncIOMotorClient
from pymongo.server_api import ServerApi
from settings import Settings
from datetime import datetime


class AsyncMongoDatabase:
    def __init__(self, settings):
        """
        Initializes the asynchronous database connection.

        Args:
            uri (str): The connection URI for your MongoDB instance.
            database_name (str): The name of the database to connect to.
        """
        uri = self.get_uri(settings)
        self.client = AsyncIOMotorClient(uri, server_api=ServerApi("1"))
        self.db = self.client[settings.MONGO_DATABASE]

    def get_uri(self, settings):
        uri = f"mongodb+srv://{settings.MONGO_USERNAME}:{settings.MONGO_PASSWORD}@{settings.MONGO_CLUSTER}/{settings.MONGO_DATABASE}?retryWrites=true&w=majority&appName={settings.MONGO_APPNAME}"
        return uri

    async def __aenter__(self):
        """
        Asynchronous context manager for the database connection.
        """
        return self

    async def __aexit__(self, exc_type, exc_val, exc_tb):
        """
        Closes the connection to the database when the context manager exits.
        """
        self.client.close()

    # --- CRUD Operations ---

    async def insert_one(self, collection_name, document):
        """
        Asynchronously inserts a single document into a collection.

        Args:
            collection_name (str): The name of the collection to insert into.
            document (dict): The document to insert.

        Returns:
            ObjectId: The ID of the inserted document.
        """
        document['created_at'] = datetime.utcnow()
        document['updated_at'] = datetime.utcnow()
        result = await self.db[collection_name].insert_one(document)
        return result.inserted_id

    async def find_one(self, collection_name, query=None):
        """
        Asynchronously finds one document in a collection that matches the given query.

        Args:
            collection_name (str): The name of the collection to search in.
            query (dict, optional): The query document to find the document. Defaults to None, which finds the first document.

        Returns:
            dict or None: The matching document or None if no document is found.
        """
        return await self.db[collection_name].find_one(query)

    async def find_all(
        self, collection_name, query=None, sort=None, skip=None, limit=None
    ):
        """
        Asynchronously finds all documents in a collection that match the given query,
        with optional sorting, skipping, and limiting.

        Args:
            collection_name (str): The name of the collection to search in.
            query (dict, optional): The query document to find the documents. Defaults to None, which returns all documents.
            sort (list, optional): A list of sort criteria. Defaults to None.
            skip (int, optional): The number of documents to skip. Defaults to None.
            limit (int, optional): The maximum number of documents to return. Defaults to None.

        Returns:
            cursor: An asynchronous cursor object that can be used to iterate through the results.
        """
        cursor = self.db[collection_name].find(query, sort=sort, skip=skip, limit=limit)
        return cursor

    async def update_one(self, collection_name, query, update):
        """
        Asynchronously updates one document in a collection that matches the given query.

        Args:
            collection_name (str): The name of the collection to update in.
            query (dict): The query document to find the document to update.
            update (dict): The update document to apply to the matched document.

        Returns:
            UpdateResult: An object containing information about the update operation.
        """
        update['updated_at'] = datetime.utcnow()
        return await self.db[collection_name].update_one(query, update)

    async def update_many(self, collection_name, query, update):
        """
        Asynchronously updates multiple documents in a collection that match the given query.

        Args:
            collection_name (str): The name of the collection to update in.
            query (dict): The query document to find the documents to update.
            update (dict): The update document to apply to the matched documents.

        Returns:
            UpdateResult: An object containing information about the update operation, including the number of documents modified.
        """
        return await self.db[collection_name].update_many(query, update)
    
    async def find_and_update_one(self, collection_name, query, update):
        """
        Asynchronously finds and updates one document in a collection that matches the given query.

        Args:
            collection_name (str): The name of the collection to search and update.
            query (dict): The query document to find the document to update.
            update (dict): The update document to apply to the matched document.

        Returns:
            dict or None: The original document before the update or None if no document is found.
        """
        # Add the updated_at field to the update document
        update['$set']['updated_at'] = datetime.utcnow()
        
        # Use find_one_and_update to atomically find and update the document
        return await self.db[collection_name].find_one_and_update(query, update, upsert=True, return_document=True)

    async def delete_one(self, collection_name, query):
        """
        Asynchronously deletes one document in a collection that matches the given query.

        Args:
            collection_name (str): The name of the collection to delete from.
            query (dict): The query document to find the document to delete.

        Returns:
            DeleteResult: An object containing information about the delete operation.
        """
        return await self.db[collection_name].delete_one(query)

    async def delete_many(self, collection_name, query):
        """
        Asynchronously deletes all documents in a collection that match the given query.

        Args:
            collection_name (str): The name of the collection to delete from.
            query (dict): The query document to find the documents to delete.

        Returns:
            DeleteResult: An object containing information about the delete operation, including the number of documents deleted.
        """
        return await self.db[collection_name].delete_many(query)
    
    async def get_next_sequence(self, collection_name, sequence_name):
        sequence_document = await self.db[collection_name].find_one_and_update(
            {'_id': sequence_name},
            {'$inc': {'sequence_value': 1}},
            upsert=True,
            return_document=True
        )
        return sequence_document['sequence_value']
    
    async def aggregate(self, collection_name, pipeline):
        """
        Asynchronously performs an aggregation operation on a collection.

        Args:
            collection_name (str): The name of the collection to aggregate on.
            pipeline (list): The aggregation pipeline.

        Returns:
            cursor: An asynchronous cursor object that can be used to iterate through the aggregation results.
        """
        return await self.db[collection_name].aggregate(pipeline).to_list(length=None)


async def get_mongo_database(settings: Settings):
    """
    FastAPI dependency function to create and return an AsyncMongoDatabase instance.
    """
    # Replace with your actual connection URI and database name
    db = AsyncMongoDatabase(settings)
    return db
