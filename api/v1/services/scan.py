from api.v1.schemas.user import CreateUser, UserInDB
from api.v1.schemas.scan import ScanItem,ScanCreateItem, ScanItemInDB
from fastapi.responses import JSONResponse
from api.v1.services.auth import get_password_hash
from api.v1.db.async_mongo import AsyncMongoDatabase

async def create_user(db:AsyncMongoDatabase, user:CreateUser)-> UserInDB:
    user.hashed_password = await get_password_hash(user.hashed_password)
    async with db:
        inserted_id = await db.insert_one("users", user.__dict__)
        inserted_doc = UserInDB(id=str(inserted_id),**user.__dict__)
        return inserted_doc

async def create_scan(db:AsyncMongoDatabase, scan_data: ScanItem):
    try:
        scan_auto_id = await db.get_next_sequence("sequence","scan_auto_id")
        db_scan = ScanCreateItem(scan_id=scan_auto_id, name=scan_data.name, scan_urls=scan_data.scan_urls, status=1)
        async with db:
            inserted_id = await db.insert_one("scanner", db_scan.__dict__)
            inserted_doc = ScanItemInDB(id=str(inserted_id),**db_scan.__dict__)
            data = {"id":inserted_doc.id, "scan_id": inserted_doc.scan_id, "name":inserted_doc.name, "scan_urls":inserted_doc.scan_urls, "status":inserted_doc.status}
            return JSONResponse(content={"status": "success", "data": data}, status_code=200) 
    except Exception as e:
        return JSONResponse(content={"status": "error", "message": str(e)}, status_code=500)

async def get_scan(db: AsyncMongoDatabase, scan_id: int):
    async with db:
        pipeline = [
            { "$match": { "scan_id": scan_id } },
            {
                "$lookup": {
                    "from": "scan_status",
                    "localField": "status",
                    "foreignField": "_id",
                    "as": "status_info"
                }
            },
            {
                "$unwind": "$status_info"
            },
            {
                "$project": {
                    "scan_id": 1,
                    "name": 1,
                    "info": 1,
                    "status": 1,
                    "status_info": "$status_info.name",
                    "created_at": 1,
                    "updated_at": 1
                }
            }
        ]
        db_scan =  await db.aggregate("scanner", pipeline)
        if not db_scan:
            return JSONResponse(content={"status": "error", "message": "Scan not found"}, status_code=404)
        data = {"id":str(db_scan[0]["_id"]), "scan_id": db_scan[0]["scan_id"], "name":db_scan[0]["name"], "scan_urls":db_scan[0]["scan_urls"], "status_info":db_scan[0]["status_info"],"status":db_scan[0]["status"]}
        return JSONResponse(content={"status": "success", "data": data}, status_code=200)
