create schema if not exists scanner;

CREATE TABLE scan_status (
    id SERIAL PRIMARY KEY,
    name VARCHAR(50) UNIQUE,
    time_added TIMESTAMP DEFAULT current_timestamp,
    time_modified TIMESTAMP DEFAULT current_timestamp
);

CREATE TABLE scans (
    id INTEGER PRIMARY KEY,
    name VARCHAR(100),
    info JSONB,
    status INTEGER,
    time_added TIMESTAMP DEFAULT current_timestamp,
    time_modified TIMESTAMP DEFAULT current_timestamp,
    FOREIGN KEY (status) REFERENCES scan_status (id)
);

CREATE TABLE scan_log (
    id INTEGER PRIMARY KEY,
    scan_id INTEGER,
    scan_status INTEGER,
    time_added TIMESTAMP DEFAULT current_timestamp,
    time_modified TIMESTAMP DEFAULT current_timestamp,
    FOREIGN KEY (scan_id) REFERENCES scan (id)
);

INSERT INTO scan_status (name) 
VALUES 
  ('INITIATED'),
  ('COMPLETED'),
  ('FAILED'),
  ('RESUMED');

-- Create a function to insert data into scan_log table
CREATE OR REPLACE FUNCTION insert_scan_log()
RETURNS TRIGGER AS
$$
BEGIN
    INSERT INTO scan_log (scan_id, scan_status, log_message)
    VALUES (NEW.id, NEW.status, 'inserted');
    RETURN NEW;
END;
$$
LANGUAGE plpgsql;

-- Create a trigger to call the insert_scan_log function after INSERT operation on scan table
CREATE TRIGGER trigger_insert_scan_log
AFTER INSERT ON scan
FOR EACH ROW
EXECUTE FUNCTION insert_scan_log();






